#include <stdio.h>
#include <Windows.h>
#include <TlHelp32.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <errno.h>
#include <wchar.h>

void openAppFromConfigFile() {
    char configPath[1024]; // 配置文件路径
    char appPath[1024];    // 软件路径

    // 获取程序路径
    if (!GetModuleFileName(NULL, configPath, 1024)) {
        perror("GetModuleFileName");
        return;
    }

    // 获取配置文件路径
    strcpy(strrchr(configPath, '\\'), "\\config.txt");

    // 打开配置文件
    FILE* fp = fopen(configPath, "r");
    if (!fp) {
        printf("Failed to open config file\n");
        return;
    }

    // 读取软件路径
    if (!fgets(appPath, sizeof(appPath), fp)) {
        printf("Failed to read app path\n");
        fclose(fp);
        return;
    }

    // 去除路径中的换行符
    appPath[strcspn(appPath, "\r\n")] = 0;

    // 关闭配置文件
    fclose(fp);

    // 转换路径编码
	WCHAR appPathUnicode[1024];
	MultiByteToWideChar(CP_ACP, 0, appPath, -1, appPathUnicode, sizeof(appPathUnicode) / sizeof(WCHAR));

	CHAR appPathUTF8[1024];
	WideCharToMultiByte(CP_UTF8, 0, appPathUnicode, -1, appPathUTF8, sizeof(appPathUTF8), NULL, NULL);


    // 打开软件
    STARTUPINFOA startupInfo = { sizeof(startupInfo) };
    PROCESS_INFORMATION processInfo;
    if (!CreateProcessA(NULL, appPathUTF8, NULL, NULL, FALSE, 0, NULL, NULL, &startupInfo, &processInfo)) {
        printf("Failed to open app: %s\n", appPath);
        return;
    }
}

void close_mhyprot2_handle()
{
    HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnap == INVALID_HANDLE_VALUE)
    {
        printf("Failed to create snapshot of running processes.\n");
        return;
    }

    PROCESSENTRY32 pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32);
    if (!Process32First(hSnap, &pe32))
    {
        printf("Failed to get first process.\n");
        CloseHandle(hSnap);
        return;
    }

    BOOL bFound = FALSE;
    while (Process32Next(hSnap, &pe32))
    {
        HANDLE hProc = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pe32.th32ProcessID);
        if (hProc != NULL)
        {
            HANDLE hSnapMod = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, pe32.th32ProcessID);
            if (hSnapMod != INVALID_HANDLE_VALUE)
            {
                MODULEENTRY32 me32;
                me32.dwSize = sizeof(MODULEENTRY32);
                if (Module32First(hSnapMod, &me32))
                {
                    do
                    {
                        if (strcmp(me32.szModule, "mhyprot2") == 0)
                        {
                            HANDLE hMhyprot2 = me32.hModule;
                            if (CloseHandle(hMhyprot2))
                            {
                                printf("mhyprot2 handle closed successfully.\n");
                            }
                            else
                            {
                                printf("Failed to close mhyprot2 handle.\n");
                            }
                            bFound = TRUE;
                            break;
                        }
                    } while (Module32Next(hSnapMod, &me32));
                }
                CloseHandle(hSnapMod);
            }
            CloseHandle(hProc);
        }
    }

    if (!bFound)
    {
        printf("mhyprot2 handle not found.\n");
    }

    CloseHandle(hSnap);
}

int main() {
	printf("Finding game path and open...\n");
    openAppFromConfigFile();
    printf("Waiting for 15 seconds...\n");
    Sleep(15000);
    while (1) {		   	    	
        close_mhyprot2_handle();
        Sleep(5000); 
    }
    return 0;
}
